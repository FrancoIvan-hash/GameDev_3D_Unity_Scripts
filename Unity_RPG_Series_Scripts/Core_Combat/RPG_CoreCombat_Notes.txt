Unity RPG Core Combat: Make Your Own RPG Combat System

1. Intro and Setup

DONE

2. Basis Movement

Create a Simple Sandbox
- imported Synty Studios sandbox and terrain textures
- created a simple terrain and place prefabs all over 
---> painted terrain as well

Move Using Nav Mesh Agent
- need to install AI from package manager
- place a gameObject called NavMesh Surface and bake surface in Inspector
- attach NavMeshAgent component to desired gameobject that will be moved using NavMesh
- NavMeshAgent has a destination property

Refining Your Nav Mesh
- looked at the settings we can tweak in the navmesh surface to improve it
- make sure objects that you don't want to be marked as walkable by navmesh are set to Static

Introduction To Raycasting
- what is Raycasting?
---> Raycasting is the process of shooting an invisible ray from a point, in a specified direction, to detect whether 
---> ... any colliders lay in the path of the ray.
- to get where we click in the world
---> Ray lastRay = Camera.main.ScreenPointToRay(Input.mousePosition);
- Debug.DrawRay(lastRay.origin, lastRay.direction * 100);
---> draws the ray
---> lastRay.origin is where the ray got shot from (camera)
---> lastRay.direction is the direction of the ray

Implement Click-To-Move
- CTRL + Shift + SPACE 
---> shows all signatures of a selected method
- Ray, RaycastHit (has a property called point, which is where we hit)

Create a Fixed Follow Camera
- created empty gameObject (FollowCamera) and attached main camera to it
- wrote a script so that FollowCamera moves with Player

Animation Blend Trees
- Terminology
---> Animator Component: 
------> Assigns animations to GameObjects through an Animator Controller
---> Animator Controller:
------> Arrangement of animations and transitions (state machine)
---> Animation:
------> Specific pieces of motion
---> Blend Tree
------> Allows multiple animations to be blended together smoothly

Match Animation To Movement
- in Animator component attached to Player
---> connect Controller and Avatar (character that we're using to animate)
---> make sure Apply Root Motion is checked off so that the animator doesn't controll Player/Character movements
- Some Context
---> Velocity = rate of change of position over time
------> ie. Speed and direction
------> e.g. Car travelling North at 50 km/h
---> The NavMeshAgent is thinking in terms of velocity - direction to move and speed to travel there
---> Our character's locomotion animations are only interested in forward speed (along z axis)
- Therefore Our Goal
---> Get the global velocity from NavMeshAgent
---> Convert this into a local value relative to the character
---> Set the animator blend value to be equal to our desired forward speed (on the Z axis)
- change rotation speed (so that animation looks better) in NavMeshAgent component
---> change angular speed and acceleration

Basic Movement Tweaks
- Continuous Clock-To-Move
---> changed the behaviour so the player can hold down LMB to continuously move
---> from Input.GetMouseButtonDown(0) to Input.GetMouseButton(0)
- FolloCamera.cs
---> changed Update to LateUpdate so that there's no error in order of execution
---> means that we want the camera to follow the player after the player moves (and not be changing what moves first)

3. High Level Game Design

High Level Design
- how this game differentiate from other games
- think about what you want your game to be aboud

1.5 Page Game Design Document
- RPG Game Design Is A Battle...
---> your epic imagination vs your realistic limitations
- Think Big, Start Small
---> start by creating a simple gameplay moment
- set your creative direction
---> complete the first section of the 1.5 page GDD
---> add 2 images that summarize what your game is about
---> create a simple 1 line summary of your game

The Player Experience
- why do people like playing games?
---> what they will say
------> it's fun
------> I'm good at it
------> the graphics look great
---> what they actually mean
------> it made me feel a certain way
------> it game me an interesting experience
- the best games give a player a consistent experience throughout the game
- most important high level design
---> to create a very specific and consistent player experience
- 3 ways to express player experience
---> make the player feel "like a type of person"
---> make the player feel "a certain emotion"
---> give the player the same feeling as "doing a certain activity" 
- Makes decision making easier
---> the best games create a CONSISTENT experience in every aspect of the game
------> art
------> gameplay
------> audio
------> story
------> marketing
---> if in doubt, do whatever will create the experience you're aiming for

First Draft Of Your GDD
- writing idea for game in Docs

4. Basic Combat

Section Overview
- Click to attack
- Animations
- Repeat attacking
- Damage dealing
- Death 

Separating The Control Layer
- CTRL + / to comment a selected block of code
---> use samea method to uncomment

Namespaces To See Dependencies
- Dependencies are evil
---> something might break if a namespace/feature changes which is used by other features/scripts
- Cycles are worse
---> circular dependency
---> this might even change the feature that we change in the first place
- Layering
---> more stability the lower something is in the layering system
- Cohesion
---> try to be related to each other as much as possible

Raycasting For Components
- come back for notes

Implementing Action Priority
- come back for notes

Move Within Range
- NavMeshAgent.isStopped 
---> a boolean property that stops the navmeshagent 

Cancelling Combat With Movement
- Short-Circuit Operators
---> FirstFunction() && SecondFunction()
------> will evaluate FirstFunction first and then SecondFunction if needed
------> if FirstFunction returns false, then it instantly returns false
---> First() || Second()
------> if First is true, it returns true without evaluating the Second() 

Decoupling Dependency Cycles
- we had a circular dependency with combat and movement (both depended on each other)
- Breaking the Knot
---> Movement depends on Combat
---> Combat depends on Movement
---> will introduce Schedular to deal with mutual dependency
- Substitution Principle
---> when you inherit from something, you have to behave exactly like that thing
---> example: Missile class
------> Missile: it has to be pointed at a direction and launched
------> Bullet: it inherits from Missile, so it must be able to be pointed at a direction and launched
------> this is true for an arrow, and rocket as well
---> be able to pass in something without knowing what it actually is
---> you can always substitute a derived type, a type that inherits from the parent type instead of the parent type

Dependency Inversion With Interfaces
- Return to Cycles
---> Scheduler can depend on both Movement and Combat
- Dependency Inversion
---> introducing Interfaces
---> change Scheduler calling Movement and/or Combat, to Movement/Combat calling to Interface (connected to Scheduler)
- IAction
---> this is an interface
---> it is a contract between the implementer of the contract and the caller of the contract
------> Implementer: Movement and Combat
------> Caller: Scheduler
---> Thus, Scheduler will depend on IAction
- public interface IAction { }
---> this means that we can say that anything that implements this interface (Movement and Combat) has to have a certain method
---> can only put methods or properties but not implement them  
- removed Movement depending on Combat by implementing this interface

Add Attack Animation
- imported animations 

Trigger Animation In Code
- GetComponent<Animator>().SetTrigger("attack");

Throttlig Our Attacks
- triggers in animation
---> it's like a boolean
---> however, it goes back to false after the transition has happened
- Time.deltaTime
---> gives us the time since last rendered (or since the last time update was called)

Taking Damage
- adding Health script component to Enemy prefab

Nested Prefabs
- Prefabs
---> a collection of GameObjects (it has a hierarchy)
---> each GameObject has a bunch of components under it
---> under each component, you have a bunch of property overrides
- CTRL + Shift + F
---> to search in all projects (in VSCode)
- CTRL + F
---> to search in the file
- Nesting
---> instead of putting a gameobject in the hierarchy, it will put a prefab instance
---> that prefab instance will reference another prefab
- if you make a change to the prefab instance inside the parent prefab, it won't apply it to the original prefab instance
----> unless you hit apply
- Variants
---> they are like nested prefabs
---> however, the whole prefab is really just a pointer to a different prefab with a list of modifications

Using Prefab Variants
- come back for notes

Any State Animations
- come back for notes

Trigger Death Animation
- come back for notes

Stop Attacking Already
- [RequireComponent(typeof(Health))]
---> makes sure that whatever adds the current component, the component specified above also gets added
- added a new trigger and changed a few things in Healt.cs and Fighter.cs

Look Them In The Eyes
- How to know when to move on to next feature?
---> in early development, don't get stuck on one feature
---> move on to next thing when you can pass this test:
------> "Is there anything about this feature which is distracting or broken?"
- last bit of twiddling for basic combat
---> change player slightly, more handsome
---> make player look at the enemies when thumping them
---> make sure that the dead don't interfere with thumping
- Transform.LookAt()
---> rotates the transform so the forward vector points at target's current position

Ignore Dead Enemies
- implemented a CanAttack method that help us ignore dead enemies when doing a RaycastHit

Bugs? What Bugs?
- what is a bug?
---> when you game doesn't work as intended
- when to fix different types of bugs
---> game breaking - stops game from working
------> drop everything, fix immediately
---> annoying - player will be distracted
------> fix before moving on to next feature
---> looks bad - player will notice
------> fix if you get time
---> could be improved - player may or may not know
------> not a bug! add it to your "polish" list for end of project
- Process For Fixing Bugs
---> be very clear on the repro (reproduction) steps
---> follow your code's logic step-by-step and ask "what exactly is this step doing?"
---> look for:
------> doing the wrong thing
------> doing additional things
------> not actually doing the thing
---> alter the code
---> test the repro steps and general gameplay
- Used ResetTrigger() to reset any triggers
---> there was a bug where StopAttack trigger wouldn't be fully consumed which led to attacking looking weird

5. Enemy AI

Section Overview
- Feature List
---> Chase radius
---> Aggression behaviour
---> Gizmos
---> Suspicion
---> Guarding
---> Patrol route

Swappable Control System
-

Disable Control When Dead
- 

Visualising With Gizmos
- private void OnDrawGizmosSelected()
---> Gizmos.color = Color.blue;
---> Gizmos.DrawWireSphere(Vector3 center/position, float radius)

AI Guarding Behaviour
- com back for notes

That's Some Suspicious Behaviour
- come back for notes

Visualising Waypoints
- transform.childCount
---> gets the number of children in a parent gameObject
- transform.GetChild(int)
---> gets the child from parent

Waypoint Loops
- come back for notes

Patrolling Behaviour
- come back for notes

Dwelling At Waypoints
- come back for notes

6. First Moment

Section Overview
-

Design A Moment
-

Sketch Your Moment
-

Tips To Improve Workflow
-

Craft The Environment
-

Hits-To-Kill Design Metric
-

Tweak Enemy Patrol
-

Cinemachine Follow Camera
-

Make Cinematic Sequence
-

Trigger Cinemachine Cutscene
-

The Observer Pattern In C#
-

Player Input In Cutscenes
- 

7. Scene Management

8. Saving Asset Pack

9. Saving System

10. Simple Weapons

11. Character Stats

12. Final Polish

