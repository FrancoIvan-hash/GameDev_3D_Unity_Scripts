1. INTRODUCTION AND SETUP

Reminder of C# Fundamentals
- Expectations for the course
---> have some familiarity with basic coding concepts
---> previously done at least some coding in Unity
- Why this video?
---> a quick reminder of key programming concepts
---> a reference for what you should already know when diving into this course
- Reminders on Syntax?
---> Unity Documentation
------> docs.unity3d.com
---> Microsoft C# documentation
------> docs.microsoft.com
- Script Structure
---> namespace UnityEngine
-----> class OurClass
-------> SomeMethod()
---------> statements;
---> classes can be nested inside a namespace
---> classes generally contain a collection of methods
---> methods contain statements and logic
- MonoBehaviour
---> Derives from the base Unity Object class
---> allows you to add components to an object in the Unity inspector
---> contains common methods like Start() and Update()
- Scriptable Objects
---> derives from the base Unity Object class
---> actas a data container
---> cannot be directly attached to a GameObject
---> have to call it inside a Monobehaviour class to get it into the rest of our game
- Jump Statements
---> transfer control from one part to another
-----> return : quits out of the method
-----> break : stops the current loop or switch statement
-----> continue : breaks from the current iteration of a loop
- Collections
---> collections contain elements
---> elements are given an index within the collection
---> counting starts at 0
------> arrays = immutable collection with a fixed size
--------> int[] myArray = new int[3];
------> List = mutable collection with a variable size
--------> List<int> myList = new List<int>()
- Other Useful Reminders
---> Time.deltaTime records the duration of the last frame and can be used to make your code framerate independent
---> Script execution order controls the order in which methods are called
---> There are no guarantees for the order in which classes are called, unless you explicitly set it!
------> Find componets in Awake()
------> Use components in Start()

Render Pipeline and Assets
- Unity Render Pipelines (a system that defines how your project is rendered)
---> Built-in Render Pipeline (BiRP)
---> Universal Render Pipeline (URP)
------> runs on everything
---> High Definition Render Pipeline (HDRP) 
------> get the absolutely best visuals with tons and tons of options
------> targeted at high-end PCs and high-end consoles
---> should choose between URP and HDRP when creating a game

Post Processing
- added a bunch of Post-Processing stuff to make the visuals a bit better
- might want to rewatch this lecture to remind myself how to do this

2. UNIT MOVEMENT AND SELECTION

Intro - Unit Movement and Selection
- there's a really nice visual for this section
- what we will learn
---> Player: private float speed;
------> OnSpeedChanged(): UI
------> NoMethod(): UpgradeSystem
------> SetSpeed(): Enemy
------> SetDebuff(SlowSpeed): Enemy Boss

Unity Base Setup
- basically parenting the visuals to an empty gameobject
---> separate logic from visuals
---> the pivot should be at the bottom of the prefab (important for our game)

Unit Move
- Vector3.Distance(Vector3, Vector3)
---> gets the distance between two vectors
---> can use this function (with its returned value) to make sure your character stops a bit before its target position
------> otherwise it will move back and forth between the target position and some weird offset

Mouse Raycast
- Input.mousePosition
---> gets the position of our mouse in the scene in pixel coordinates
- Raycast
---> it's essentially a virtual laser from the camera 
---> camera fires it and sees what it hits (anything that contains a collider)
- nowadays you can directly use Camera.main without the need of caching it yourself
---> Unity 2020 and above does the caching for you
- Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
---> it returns a Ray going from the camera through a screen point
- Physics.Raycast(ray)
---> returns true if it hits something, false otherwise
- how physics and raycast work
---> raycast is looking for colliders, meaning it's looking for objects that exist in the physics world
---> however, the physics wold is not necessarily the exact same as the visual world
-----> meaning that the raycast only hits colliders regardless if there is a visual or not
---> always remember that the Raycast is a physics function

Mouse World Position
- Physics.Raycast(ray, out RaycastHit raycastHit);
---> if the ray hits something, the function returns all the info in raycastHit
- layers in Unity is a nice way of categorizing objects
---> it works especially well with the physics system
- Physics.Raycast(ray, out RaycastHit raycastHit, float.MaxValue, mousePlaneLayerMask)
---> float.MaxValue: biggest value to give to the raycast (we don't want to cut the raycast short)
---> mousePlaneLayerMask is of typoe LayerMask
------> just let use get the Layer that we made to specify the plane/floor that we want the raycast to register when hitting
- public static GetPosition()
---> static just means that this function is going to belong to the class itself and not any instance of the class
- private static MouseWorld instance
---> since we're only going to have a single most well-know instance in our world, we define it like that
---> make sure we initialize instance to this in Awake
- static should always be used sparringly
---> they basically act as global state, which is always tricky and prone to mistake

Public vs SerializeField Private
- public
---> the hall code space has access and modify 
- private
---> reduce complexity
- the goal is to minimize access as much as possible
---> thus, minimizing complexity

Unit Click to Move
- Input.GetMouseKeyDown(0)
---> returns true if RMB was clicked

Unit Animation Setup
- visited Maximo.com
---> downloaded Slim Shooter pack
---> changed animation name, enabled loop time and changed Root Transform Rotation (to Original)

Unit Animator
- in Animator component attached to character
---> Apply Root Motion: root motion is essentially movement that is baked directly into the animation itself
- Has Exit Time in animation transition
---> it will automatically transition to the other animation once the current animation finishes
- if you drag the riffle to the scene and then you make it a child of the character, the scale won't change
---> which is actually perfect 
- instructor went over a bunch of stuff, so REWATCH IF NEEDED

Unit Animator Parameters
- Animator.SetBool("IsWalking", true);
---> this method changes the value of our animator param (IsWalking)
---> this enables us to make transitions between states (and thus, between animations)

Unit Rotate When Moving
- 3 Methods for Rotating Game Object
---> transform.rotation
------> if you're a fan of Quaternions, this is a great way of using them
---> transform.eulerAngles
------> they go from 0 to 360 degrees; alt -> you can use radians and do some math
---> transform.forward
------> easy to understand when dealing with vectors
- since we already have a moveDirection vector, we can modify transform.forward pretty easy
---> transform.forward = moveDirection;
------> moveDirection = (targetPosition - transform.position).normalized;
- transform.forward = Vector3.Lerp(transform.forward, moveDirection, Time.deltaTime);
---> smooth rotation using our current forward, moveDirection as our target position
---> Time.deltaTime is used such that the player reaches its final rotation smoothly
------> fixed: multiplied Time.deltaTime * rotateSpeed ( = 10f)  

Unit Selection
- similar to MouseWorld
---> used a Raycast to check whether we hit something of Layer type Units
---> if so, set selectedUnit to that 
- we made sure that this script (UnitActionSystem) gets run before all the other scripts (because it has all our game logic)
---> go into Project Settings >> Script Execution Order, and place script before Default Time

Unit Selected Visuals, Events
- Events
---> You have publishers: event
---> You have subscribers
- This is called the Observers Pattern
- public event EventHandler OnSelectedUnitChanged;
---> this is our event
---> EventHandler: it is C# standard
---> public so that it can be accessed everywhere
- OnSelectedUnitChanged?.Invoke(this, EventArgs.Empty);
---> this is how you fire an event
---> ?. : checks that the event isn't null
---> Invoke(this, EventArgs.Empty) basically tells that this fired the event and sends no argumets
------> this is used because of EventHandler

Unit Selected Visual, Singleton
- public static UnitActionSystem Instance { get; private set; }
---> it means that whatever we have in this class can be seen by other classes but not set
- Instructor's rules on using Awake and Start
---> use Awake to initialize things like the Singleton pattern
---> use Start to get external references

3. GRID SYSTEM AND SELECTION

Grid System
- our grid system will be a pure C# script
---> removed MonoBehaviour
---> we want to make our own constructor to init values in our class
- Debug.DrawLine()
---> a great debugging function to draw a simple line
---> it takes a start and end vector
---> it also takes a Color and a duration (how long should the line be visible for)
- public struct GridPosition
---> this struct will store the values for the grid (x and z position values)
---> this is a struct instead of a class because:
------> struct is a value-type 
---------> you're working with copies of the values (you don't change the original)
------> class is a reference-type  
---------> you're working with class references (you change the original)
- All functions/structs have a ToString() method and you can override it
---> public override string ToString()
---> this will be how you ToString your customized struct
- Mathf.RoundToInt()
---> methods rounds a float value to an int value

Grid Object
- GridObject[,] gridObjectArray;
---> [,] : this is how you define a 2D array
- you can interchange between Transform and GameObject
---> every GameObject has a Transform
---> every Transform has to be attached to a GameObject
---> we use a 2D array to store a GridObject because we want to instantiate it right in the middle of the grid/cell

Grid Object Debug
- rewatch lecture

Level Grid
- public GridPosition GetGridPosition(Vector3 worldPosition) => gridSystem.GetGridPosition(worldPosition);
---> => is a shorthand for { return gridSystem.GetGridPosition(worldPosition); }
---> basically implementing a one-line function
---> this is called a Lambda Expression
- public static bool operator ==(GridPosition a, GridPosition b) => a.x == b.x && a.z == b.z;
---> this is how you define an operator for a custom struct
---> for a == operator, you must have a != operator definition as well
- IEquatable<GridPosition>
---> this is a topic about interfaces and generics
---> we're typing this next to GridPosition to implement a struct as perfect as it can be

Camera Move and Rotate
- used transform.eulerAngles to change the rotation of the camera
- Vector3 moveVector = transform.forward * inputMoveDir.z + transform.right * inputMoveDir.x;
---> this makes sure to update movement according to the rotation of the cameracontroller

Camera Zoom
- private CinemachineVirtualCamera cinemachineVirtualCamera;
---> you can get accessed to the cinemachine virtual camera
- CinemachineTransposer cinemachineTransposer = cinemachineVirtualCamera.GetCinemachineComponent<CinemachineTransposer>();
---> CinemachineTransposer is the type of body in cinemachine virtual camera
---> GetCinemachineComponent<CinemachineTransposer>() gets the body component of the virtual camera (CinemachineTransposer)
- cinemachineTransposer.m_FollowOffset
---> gets accessed to the follow offset in the body component in the cinemachine virtual camera

4. ACTIONS AND UI

Move Action
- rewatch lecture

Move Action Validate
- added a bunch of validations
---> rewatch lecture

Grid Visual
- added a nice visual to show which grid position the Unit is allowed to move to
---> rewatch lecture if needed

Base Action Class
- protected Unit unit;
---> protected is similar to private since no external classes can modify them or access them
---> however, only those that inherit from this class can access them
- protected virtual void Awake() { }
---> protected such that any child classes can access it
---> virtual such that those child classes can override it
- protected override void Awake() { base.Awake(); // your code }
---> protected override in the child class lets it override the method from the parent class
---> base.Awake() runs the code in the parent class and the child class can add more code after it
- public abstract class BaseAction : MonoBehaviour { }
---> abstract keyword basically doesn't let us create an instance of this class
---> we want to create instances of all of our actions which extend this class, but don't ever want to instantiate base class directly

Single Active Action
- Delegates
---> just pretty much a way to store functions in a field or parameter
---> all you need is a delegate type and make a field of that type
- public delegate void SpinCompleteDelegate();
---> simple delegate definition
- private SpinCompleteDelegate onSpinComplete;
---> this is how you define a type of that delegate to store a reference
---> onSpinComplete() : how you call the delegate
- Action is a built-in delegate
---> many types of that
---> returns void
- Func
---> another built-in delegate
---> returns any value you want 
- changed our define delegate to Action
- refactored code
---> defined delegate in BaseAction class 

UI Setup
- changed canvas scaler to scale with screen size 
---> used 1280 x 720 resolution
---> match complete height
---> recommended settings for a Desktop game

Unit Action System UI
- on a button in the canvas
---> Outline component to add an outline around the button
---> Shadow component to add a shadow for the button
- Grid Layout Group component 
---> it aligns everything you have as a group nicely
---> you can change settings to adjust as you like
- error when destroying a Transform (transformObject)
---> so destroy transformObject.gameObject
- TextMeshProUGUI vs TextMeshPro
---> TextMeshPro is for world objects 
---> TextMeshProUGUI is for UI objects
- public abstract string GetActionName();
---> we're forcing all child classes to implement this function
- ToUpper()
---> sets all characters in a string in uppercase 

Click UI to Select Action
- button.onClick.AddListener()
---> this is how you seet up the conditions for what actions a button takes when clicked
---> do this through code because the buttons get instantiated (they don't exist in our world permanently)
- button.onClick.AddListener(() =>
        {
            // code
        });
---> this is an anonymous function (also called a Lambda Expression)
---> a function that gets defined as a parameter
---> we do this here because of delegates

Generic Take Action
- 

5. ENEMIES AND COMBAT ( 2h 35m )

6. PATHFINDING ( 1h 50m )

7. POLISH ( 2h 19m )

8. BONUS: HEX GRID SYSTEM ( 40 m )

9. BONUS: MULTI-FLOORS ( 1h 37m ) 