UNITY THIRD PERSON: COMBAT & TRAVERSAL

Installation and Setup
- Packaged we need
---> Cinemachine
---> Input System
---> TextMeshPro
---> Unity UI
---> Universal RP
---> Visual Studio Code Editor

What is a state machine?
- example state machine
---> in Animator window to set which animation to play depending on any action
- will be writing our own state machine
- another example:
---> Patrol -- Can see player --> Chase -- In Attack range --> Attack -- Attack finished --> Chase -- Lost the player --> Patrol 
---> and start over
- States
---> what to do when in a particular state
------> can separate everything out in their own state, and just makes it a lot easier to work with and maintain
---> Called once upon entering a state: Enter();
---> Called every frame when in a state: Tick();
------> logic througout our state 
------> like Update 
---> Called once upon exiting a state: Exit();
- Chase State example
---> Enter();
------> Play chase animation
---> Tick();
------> Move toward the player
------> Keep checking distance to player and transition to attack if close enough or patrol if too far away
---> Exit();
------> N/A 

Creating Our State Machine:
- Unity Animator State Machine?
---> designed with animation in mind
---> can be in multiple states at once
------> we don't want this, we want to finish one state first before entering another 
- we don't have as much control compared to creating our own
- abstract keyword
---> stick it before class keyword to create an abstract class 
---> it means you can't create a state, but can inherit it and create a jumping state, for example
------> basically, creates template and methods can have their own definitions for the said methods
---> can create abstract methods
------> this means that any states have to have this method
- State Inheritance:
---> State: base abstract class
---> EnemyBaseState and PlayerBaseState inherit from State class
---> PlayerJumpingState and PlayerBlocking inherit from PlayerBaseState
- State Machine Inheritance
---> StateMachine: Base class
---> EnemyStateMachine and PlayerStateMachine inherit from StateMachine
---> StateMachine stores the current state that it's in and it has a way to switch between states 
- State currentState
---> currentState?.Tick(Time.deltaTime);
------> ?: checks whether currentState is or isn't null (if it isn't, it runs the Tick() method)
---------> it is called the null conditional operator
---------> it won't work with MonoBehavior or script for object reference (just do normal if stmt)
- Unity won't let us add an abstract class to a gameobject which is what we want for StateMachine

Constructors and Inheritance:
- if you hit F12 on inherited class (ClassName : InheritFromClassName), it takes you to that script
- abstract keyword tells Unity we won't be writing the logic for our methods in that specific class/script
- protected PlayerStateMachine stateMachine;
---> protected: that means that only classes that inherit this class can access the stateMachine
- constructors have the same name as the script/class they're in and don't have a return type

Testing Player State Machine
- hit ctrl + . when selecting ClassName when inheriting from an abstract class and choose implement abstract methods
---> this writes all the abstract methods so we can implement them in our current script
- constructor looks like this:
---> public PlayerTestState(PlayerStateMachine stateMachine) : base(stateMachine) {}
------> this basically takes care of the constructor
------> base(stateMachine) calls the base class constructor and passes in the param stateMachine (this.stateMachine = stateMachine)
------> this allows us to add more params to the constructor in current script
- override methodType MethodInherited()
---> override keyword allows us to have different definitions for the same method in different classes

Creating an Action Map:
- Go to root of Assets folder
---> hit Create, scroll down to Input Actions
---> what this asset does is simply tell Unity what buttons correlate with what actions
- normally you would want different Actions maps because the player actions might be different for menu actions
---> the same buttons might do different things for the menu and actual game

Handling Inputs
- we have a script InputReader to deal with player input
---> InputReader : MonoBehaviour, Controls.IPlayerActions
------> Controls.IPlayerActions is an interface (the I represents that it is an interface) because we can inherit from one class only
- Contros controls = new Controls();
---> controls.Player.SetCallbacks(this);
------> Player is the Input Map name
------> SetCallbacks(this) hooks controls with the method generated in the script (which is Jump - OnJump method)
- Events
---> things that are triggered whenever they happen as opposed to something you call, something you check every frame
---> use the event keyboard followed by the type of event (such as Action)
---> public event Action JumpEvent
- public void OnJump(InputAction.CallbackContext context)
---> method created using ctrl + . on Controls interface
---> context param is used to check a few things, for example if the jump button is pressed
- JumpEvent?.Invoke()
---> use Invoke() method to invoke an event

Input Events
- public InputReader InputReader { get; private set; }
---> this is a property
---> it lets us publicly get the InputReader (using get;)
---> however, we can only set it privately (using private set;)
- [field: SerializeField] before above line lets you see the property in the editor
---> use this to serialize a property ([SerializeField] only works on fields)
- in PlayerTestState.cs
---> stateMachine.InputReader.JumpEvent += Enter;
------> stateMachine calls the InputReader jump event
------> you subscribe to the event by += the method you want to call when the event (JumpEvent) is triggered (example, Enter)
------> -= means you're unsubscribing to the event

Player Character
- use Maximo.com to get character models
- if the model is blank (no material)
---> click on it, go to Material in inspector and change:
------> Material Creation Mode : Standard (legacy)
------> Location : Use External Materials (Legacy)

Animator State Machine
- search in Animations for locomotion
---> get pack of animations
- Attach Animator to player (or model that will be animated)
- need Animation Controller in Animator for animations

Movement Input
- add Actions to Player Action Maps called Move
---> Action Type: Value
---> Control Type: Vector2
---> this is because we want a value if we're moving WASD
---> Vector2 because we're moving left or right, up or down
- OnMove()
---> MovementValue = context.ReadValue<Vector2>();
---> the ReadValue<Vector2> gets the value when using WASD/Arrow keys or left stick and stores it in MovementValue

Player Character Controller
- Unity's component to handle player's collisions and movement within our world
---> Slope Limit: how steep you can walk/move
---> Skin Width: to handle collisions (Unity recommends it is 10% of the player's radius
- Controller.Move(value for movement)
---> Move() method is attached to Character Controller component that let us use our movement value to move our player 
- Quaternion.LookRotation(position to look at)
---> Quaternion is used for rotation
---> LookRotation() sets where to look

Movement Blend Tree
- lets you lay out different animations and set it up so you can smoothly transition between them
- stateMachine.Animator.SetFloat("FreeLookSpeed", 0, 0.1f, deltaTime)
---> access animator stored in stateMachine (PlayerStateMachine script)
---> SetFloat() sets a parameter
------> "FreeLookSpeed": param name
------> 0: value of param (if 1, start another animation)
------> 0.1f: smoothing value (dampTime) such that the animation doesn't just snap
------> deltaTime: Time.deltaTime

Cinemachine Camera
- Orbiting, Height and Radius
---> that's the three rings that change how high or low the camera can go
- Axis Speed and Acceleration
---> that's just how the camera feels to be controlled by the mouse or joystick
- Aim settings
---> to change the position of your character on the screen
- add Cinemachine Collider in extensions so that the camera isn't blocked by something specified by the tag

Camera Relative Movement
- Normalize()
---> normalizes a vector (such that player goes at a constant speed in any direction)
- look at this lecture to learn outcome
---> players moves relative to where the camera is

Movement Refactoring
- private readonly int FreeLookSpeedHash = Animator.StringToHash("FreeLookSpeed");
---> readonly: as soon as you have assigned it (variable) you cannot change it again
---> StringToHash(string): takes a string and returns an integer (used for animator component/gameObject)
---> "FreeLookSpeed" is the param name in Blend Tree
- Quaternion.Lerp(currentRotation, destinationRotation, how fast or slow we get to our target)

Creating The Environment
- if assets aren't displaying correctly, go to materials (for the prefabs/gameobjects)
---> select material, Edit >> Rendering >> Materials >> Convert
---> if some hasn't fixed yet: change shader to Universal Pipeline >> Lit

Targeting
- add a sphere collider to detect triggers (target other gameobjects)
---> make sure you have a rigidbody attached to the gameobject so collisions work
- TryGetComponent<ObjectType>(out ObjectType varName)
---> it tries to get a component of type ObjectType
---> returns a bool
---> if it finds the ObjectType, it stores it in varName specified by out ObjectType varName

Entering The Targeting State
- writing events to target (and stop targetting)
- switching between PlayerTargetingState and PlayerFreeLookState (both are scripts)
---> set up input actions to press tab (escape) to target (stop targetting)

Selecting A Target
- select first target gameobject to target
---> access from list

Targeting Camera
- add a Target Group camera from Cinemachine
- Weight Option in TargetingGroup
---> it defines how close you look towards the first or second target

State Driven Camera
- this isn't a camera, but it manages the cameras that we have
- public readonly int FreeLookBlendTreeHash = Animator.StringToHash("FreeLookBlendTree");
---> stateMachine.Animator.Play(FreeLookBlendTreeHash): plays the blend tree
- the player rotation does affect how the switching camera looks

Cinemachine Target Group
- cineTargetGroup.AddMember(Transform, weight, radius)
---> adds a target (of type Transform) to the list in Cinemachine Target Group
- cineTargetGroup.RemoveMember(Transform)
---> removes the member from the list
- public event Action<Target> OnDestroyed;
---> we do this <Target> because when we're invoking this event, we're actually passing some data (in this case which targed is destroyed)
---> OnDestroyed?.Invoke(this): we need "this" because we're passing data (what we're destroying)

Force Receiver
- CharacterController controller; gives access to our character controller (to manipulate movement)
---> controller.isGrounded checks whether or not the player is on the ground
- Physics.gravity.y
---> access the defined gravity in Unity (.y gets the y-axis value of gravity
- Vector3 movement => Vector3.up * verticalVelocity
---> => means that it returns whatever is on the right side

Targeting Animations
- float value = stateMachine.InputReader.MovementValue.y > 0 ? 1f : -1f;
---> if conditional is true, value = 1f, else value = -1f

Improved Targeting Selection
- mainCamera.WorldToViewportPoint(target.transform.position)
---> it returns where on the screen the target is
- toCenter.sqrMagnitude
---> magnitude returns the length of a vector (toCenter)
---> sqrMagnitude is easier for the computer to compute 

Player Attacking State
- context.canceled
---> checks if the player released a given button (action)

Attack Data
- stateMachine.Animator.CrossFadeInFixedTime(string animationName, float blendTime)
---> this function plays an animation defined by the name in the Animator window
---> the blendTime basically defines how long smooth the transition will be between this animation and it's stopping

Combo Attacks
- public int ComboStateIndex { get; private set; } = -1
---> to know if we can combpo to our next attack
---> can set a default like any other variable to this property
- AnimatorStateInfo currentInfo = stateMachine.Animator.GetCurrentAnimatorStateInfo(0);
---> gets the information for our current state from the animator window
- ... GetNextAnimatorStateInfo(0)
---> 0: is the layer index (base layer in animator window)
---> gets the information for the next state from the animator window
- add tag "Attack" to the Attack animations in Animator window to check in which animation we are 
- stateMachine.Animator.IsInTransition(0)
---> checks whether we're transitioning to a different animation in base layer
- nextInfo.IsTag("Attack")
---> checks if the next animation is of tag Attack
- nextInfo.normalizedTime
---> it returns how far through in this state we are

Attacking Force
- Vector3 impact = Vector3.SmoothDamp(impact, Vector3.zero, ref dampingVelocity, drag)
---> impact: the knockback or other external forces acting on the player
---> SmoothDamp() method gradually changes a vector to a desired goal over time
------> impact: is the current force/position
------> Vector3.zero: the desired Vector value we want impact to reach
------> ref dampingVelocity: a Vector3 that keeps the value modified everytime this method gets called (ref means reference to modify Vector)
------> drag: a float that defines the smoothing time (the time it will take to reach the desired value)

Weapon Hitbox
- add a capsule collider to weapon for the hitbox
- we can call methods from the animator, but you can only call methods on the same level as the animator
---> in our game, the animator is all the way on the root of the player
- on the animator, add an event on the second (frame) where you want to enable the weapon hitbox
---> do the same for the disable weapon hitbox 

Dealing Damage
- added two more scripts 
---> one is for health and the other is to detect when the weapon collides with an object with the health script

Enemy Idle State
- stateMachine.Animator.SetFloat(SpeedHash, 0f, 0.1f, deltaTime)
---> this will set the blend tree param to 0 over the course of 0.1 seconds

Player Detection
- Player = GameObject.FindObjectWithTag("Player");
---> since we're only running this line once in Start method, it's fine (we also only have one player)
---> this line (because of tags) isn't very performant 
- OnDrawGizmosSelected()
---> built-in method in Unity
---> we can draw in the editor a visualization of that range so we can see a kind of sphere that shows how far that ranges
---> this actually doesn't appear in the game
---> Gizmos.color = Color.red : this changes the color to red
---> Gizmos.DrawWireSphere(transform.position, PlayerChasingRange)
------> this draws a sphere around the transform.position (which is the enemy in our game)
------> PlayerChasingRange is the radius of the sphere
---> since this method is OnDrawGizmosSelected, it will only draw the sphere when a particular enemy is selected
------> OnDrawGizmos() method makes it always visible

Enemy Chasing State
- if you have a terrain in your world
---> make sure is static
---> this allows the nav mesh system to mark out a path on the ground that our enemies can follow
---> if it isn't static, then it's not sure that it's going to stay the same and it won't be able to make the path
- use NashMesh system to bake a path 
---> for something to use the navmesh, they need a navmesh agent component
---> this can actually move our enemy for us but we don't want that
---> navmesh agents aren't good at calculating gravity and knockback external forces, but to go from point A to B
- NavMeshAgent Agent
---> Agent.updatePosition = Agent.updateRotation = false
------> this tells the navmesh agent to not move the enemy for us
- stateMachine.Agent.destination = stateMachine.Player.transform.position;
---> this tells the navmesh agent component where we want to go (which is towards the player)
- stateMachine.Agent.desiredVelocity.normalized * stateMachine.MovementSpeed
---> we don't want speed or acceleration values on the AI to change how we move
---> that is why we normalize the desiredVelocity on the agent (and move according to our MovementSpeed) 
- stateMachine.Agent.velocity = stateMachine.Controller.velocity;
---> makes sure our agent stays in sync with our controller when the enemy is moving
- stateMachine.Agent.ResetPath()
---> resets the path of the agent when we're exiting the chasing state 


































































