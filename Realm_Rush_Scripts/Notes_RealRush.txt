REALM RUSH

Text Labels
- using TextMeshPro to add coords to cubemesh
- change font shader to TextMeshPro/Distance Field Overlay so that there are no errors rendering the text over the cube mesh 

Coordinate System
- [ExecuteAlways]
---> it lets a class excute in playmode and editmode
- Vector2Int
---> object type that stores a 2D value (x, y) using ints
- Mathf.RountToInt()
---> method that transforms a float to an int
- transform.parent.postision
---> we are using parent attr because our script is attached to a child and we're moving the whole thing (parent and children)
- UnityEditor.EditorSnapSettings
---> lets you access your settings that you made in the Grid and Snap settings
---> move.x (and move.z) gives you the amount of units you move to x or z axis
- Application.isPlaying
---> checks whether we're in playmode or not

Lists
- Lists vs Arrays in C#:
--->			Array		List
---> Collection Size :  Fixed		Variable
---> Performance     :  Fast		Varies
---> Ease of Use     :  Easy		Easy
---> Flexibility     :  Low		High
- List<ObjectType>
---> init = new List<ObjectType>()

Introducing Coroutines
-> Invoke() is a coroutine
-> InvokeRepeating(string MethodName, float time, float repeatRate)
---> invokes MethodName in time seconds, then repeatedly every repeatRate seconds
- IEnumerator
---> return type to create/define a Coroutine
---> yield return is used instead of just return in a Coroutine
---> use WaitForSeconds(float time) to delay the Coroutine
- StartCoroutine(MethodName())
---> used to called a Coroutine

Importing Assets
- if you drag a prefab inside another prefab, it creates a nested prefab
- if you change the nested prefab (original), then it changes everything 
- make sure to unpack prefab in order for changes to the original prefab don't distribute

Prefab Variants
- Prefab hierarchy
---> 			Prefab Parent
-------> Prefab child     Prefab child      Prefab Child
-------> where prefab child is a variant
- if we change something in our parent prefab, it will be reflected on the children/variants unless we override some params
- be mindful that scale might be bold/overriden so make sure to revert it (in the prefab variant) 

Smooth Enemy Movement
- LERP (Linear Interpolation)
---> since we only have the starting and endpoints (no midpoints), linear interpolation will save the day
---> Vector3.LERP(startPosition, endPosition, travelPercent)
------> startPosition: our current waypoint
------> endPosition: waypoint we're going to
------> travelPercent: between zero and one
- yield return new WaitForEndOfFrame() inside a while loop
---> waits for the end of frame to start the while loop again
- LookAt(Vector3 position)
---> makes sure the gameobject is facing the position it's moving towards

Detect Mouse Input
- use built-int methods like OnMouseOver (detect hovering over) and OnMouseDown (detect click)
---> can use Input.GetMouseButtonDown(param) to check if we have clicked somewhere)
- can use transform.name and gameObject.name to get the name of the game object

Instantiating Enemies
- Instantiate(Object to instantiate, Transform parent)
---> parent: where the object to instantiate gets parented under (becomes a child of)
---> this is another signature for Instantiate() method

Object Pools
- creation and destruction of game objects is quite resource intensive
- as game gets bigger, might cause performance issues
- object pool:
---> instantiates all of the game objects we will need and places them in the world as we need them
---> once they are no longer needed, they aren't destroyed but put back to the object pool
- OnEnable() built-in Unity method
---> it's called whenever a game object is enabled in the hierarchy
- activeSelf
---> a property to check whether a game object is active or not
- activeInHierarchy
---> another property to check whether a gameobject is active in the hierarchy or not

Target Closest Enemy:
- Find Closest Target
---> find every target in the scene
---> compare distances to see which is closest
- Mathf.Infinity
---> biggest number represented in Unity
- Vector3.Distance(currentPosition, targetPosition)
---> returns a float

Currency System (Part 1)
- Bank of the Realm
---> Tower will get money from the account
---> everytime we kill an enemy, we will get money to our bank
---> if an enemy escapes, they will steal money from our bank
- Mathf.Abs(param)
---> gets the absolute value of the param (if param is negative, returns positive value)

Currency System (Part 2)
- SceneManager.GetActiveScene()
---> returns our current scene (Scene type)
- buildIndex
---> returns the index of the scene 
---> SceneManager.GetActiveScene().buildIndex

UI Text
- TextMeshProUGUI
---> this is an object type
---> used when working with canvas elements

Increasing Difficulty
- [RequireComponent(typeof(ObjectType))]
---> this is an attribute
---> ensures that the ObjectType also gets attached to the gameObject when we attach this script

Refactoring
- path.Clear()
---> path is a List<>
---> Clear() clears the list path (makes it empty)
- Application.isPlaying
---> returns true if we're in playmode, false otherwise (editmode)
- MOVE CoordinateLabeler.cs to Editor folder in Assets when building our game (making our build) so that it doesn't break
---> it would break becasue we're using UnityEditor.EditorSnapSettings.move.x (.z)

Playtest and Balance
- change the gameworld
---> add castles, make it bigger, etc.
- change the balance of the game
---> speed of the enemy
---> how far the projectile from ballista goes (and how fast it shoots)
---> also change the particle system from local to world so that the particle continues it's first path

------------------ Second Half Of Course (New Design) ------------------------------------------------------------------------------------

Pathfinding Decisions
- which algorithm is best?
---> Breadth First Search (BFS)
------> easiest of all algorithms
------> with a few tweaks you can turn it into a Dijkstra algorithm
---> Dijkstra
---> A*
- Search algorithms overview
---> Algorithm		Always shortest path	movement costs	Multiple start or end points	Speed
---> BFS			yes		  can't handle 		yes			medium
---> Dijkstra			yes		  can handle 		yes			slow
---> A*				tricky		  can handle		no			fast
- BFS : picked algorithm that we will use for enemy pathfinding

Breadth First Search (BFS)
- Navigating a Graph
---> a graph is a collection of nodes
---> nodes are connected to each other by edges (lines)
---> can think of nodes as towns or cities connected by roads (edges)
---> we don't really need edges because BFS doesn't care about weight
- start with our starting tile
---> look at neighbors
---> queue up these neighbors and look at the neighbors of the neighbors that haven't been explored
---> we do this until we find our destination node (destination tile)
- BFS gives you different shortest paths depending on how you start exploring the neighbors (which influences building the tree)
- Instructions
---> 1) choose your search direction (up to designer)
---> 2) add the current node to the tree (at the start this is the starting node)
---> 3) add the neighbors of the current node to the tree
---> 4) move to the next node in the tree
---> 5) if you're not at the goal, go to step 3
---> 6) record your journey back up the tree
---> 7) reverse the list to get the path in the correct order

Pure C# Classes:
- a pure C# class doesn't inherit from Monobehavior
---> cannot add it to gameObjects 
- [System.Serializable]
---> makes a pure C# class be serializable

Dictionaries
- what are they?
---> stores key-value pair
---> keys link to values
---> the keys must be unique, and are usually very simple
---> the values can be more complex
---> values can be null
---> keys cannot be null
---> the lookup is very fast from key to value
---> the lookup is very slow from value to key
- Dictionary<Key, Value> name = new Dictionary<Key, Value>();
---> how you init a Dictionary

More Debugging Tools
- Dictionary.ContainsKey(dictionaryKey)
---> this function returns true if the key is in the dict, false otherwise
- new Color (float red, float blue, float green)
---> can use between 0 and 1 in each color channel to efine a new color (if there isn't a built-in one)

Exploring Neighbors
- need to specify directions for BFS algorithm
---> Vector2Int[] directions
------> init this array with Vector2Int.right, left, up, and down for directions

Exploring the World
- Queues
---> a special kind of list
---> enforces a FIFO order (first in, first out)
---> Queue<Node> queue
---> queue.Enqueue() adds to end of queue
---> queue.Dequeue() returns the front of the queue
---> queue.Peek() look but don't touch (won't use it in our code)

Finding the Path (again!)
- need to add a Flow Field
---> when we search through our neighbors, we keep track of where we came from and essentially add arrows to our map
---> and when we reached our destination, we can connect these points backwards to our starting node
---> then reverse this list
- List<Node> path = ...
---> path.Reverse() reverses the list

Blocking Nodes
- added more colors to block path

Valid Path
- KeyValuePair<Vector2Int, Node> entry in grid
---> where grid is a dictionary
---> KeyValuePair makes entry useful to access the key-value in grid
---> entry.Value to access the grid (of type GridManager) properties (connectedTo, isPath, etc.)

Script Execution Order
- we don't know which script is run first 
- Edit >> Project Settings >> Script Execution Order
---> we can edit the order in which our scripts are executed
- BUG:
---> when clicking on tile (of path to destination), the path gets redone even when no ballista is placed

Broadcast Messages
- on Unity Doc
---> calls the method methodName on every MonoBehaviour in this game object or any of its children
- like a parent shouting to their children dinner is ready and every children hears it
- BroadcastMessage("MethodName", SendMessageOptions.DontRequireReceiver);
---> sends a broadcast message to enemy to RecalculatePath (MethodName)
---> second param: we don't care if anyone is listening, send it regardless (to not get errors)

Overloading Methods
- overloaded methods
---> a type of polymorphism
---> 'poly' = many
---> 'morphism' = shapes
---> methods can have the same name if they have different signatures
- example
---> Instantiate(object)
---> Instantiate(object, position, rotation)
- BroadcastMessage("RecalculatePath", false, SendMessageOptions.DontRequireReceiver)
---> false: is the bool param that RecalculatePath takes
- StopAllCoroutines()
---> stops all coroutines 

Ambience
-

Post Processing
- 

ZOMBIE RUNNER










































































  